name: build-windows

on:
  # push:
  workflow_dispatch:
    inputs:
      use-cache:
        type: boolean
        default: true
        description: Use binary cache

jobs:
  build-maadeps-windows:
    strategy:
      matrix:
        os: [windows]
        arch: [x86, x64]
      fail-fast: false
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}-latest
    timeout-minutes: 720
    steps:
      - name: Windows runner hack
        shell: cmd
        run: |
          dir d:\a
          cd ..
          mkdir C:\MaaDeps
          rmdir MaaDeps
          mklink /j MaaDeps C:\MaaDeps
          dism /Online /Disable-Feature /FeatureName:Windows-Defender /Remove /NoRestart /Quiet
          cd .

      - name: Windows runner hack (2)
        uses: al-cheb/configure-pagefile-action@v1.3
        with:
          minimum-size: 16GB
          maximum-size: 16GB
          disk-root: "D:"

      - uses: actions/checkout@v3
        with:
          submodules: "recursive"

      - uses: actions/cache@v3
        with:
          path: |
            vcpkg/downloads/
          key: cache-downloads-${{ matrix.os }}-${{ matrix.arch }}-${{ hashfiles('vcpkg-overlay', 'vcpkg*.json') }}

      - uses: ilammy/msvc-dev-cmd@v1
        id: msvc-env
        with:
          arch: amd64${{ matrix.arch != 'x64' && format('_{0}', matrix.arch) || '' }}

      - name: Setup MSVC environment
        run: |
          echo "CC=cl" >> $GITHUB_ENV
          echo "CXX=cl" >> $GITHUB_ENV

      - name: Setup ccache
        uses: Chocobo1/setup-ccache-action@v1
        with:
          windows_compile_environment: msvc

      - name: Set target
        run: |
          lower() { printf '%s\n' "${1,,}"; }
          export RUNNER_OS=$(lower ${{runner.os}})
          export OS=$(echo $RUNNER_OS | sed 's/macOS/osx/I')
          echo "TARGET=${{ matrix.arch }}-${OS}" >> $GITHUB_ENV

      - name: Build MaaDeps
        run: |
          for attempt in 1 2 3
          do
            python3 build.py --tarball --target maa-$TARGET -- $MAA_CMAKE_ARGS && break
            # delete object and archive files (of already installed packages) and retry
            shopt -s globstar nullglob
            df -lh
            rm -f vcpkg/buildtrees/**/*.{o,obj,a,lib}
            df -lh
            du -sh vcpkg/buildtrees/*
            [[ $attempt != 3 ]]  # fail on last attempt
          done

      - name: Collect Logs
        if: always()
        run: |
          shopt -s globstar
          tar caf logs.tar --ignore-failed-read vcpkg/buildtrees/**/*.log

      - name: Upload Logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: logs-${{ env.TARGET }}
          path: logs.tar

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tarball-${{ env.TARGET }}
          path: tarball

      - name: release
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ github.ref_name }}
        shell: bash
        run: |
          gh release create "$TAG_NAME" --prerelease || true  # accept existing release
          gh release upload "$TAG_NAME" tarball/*
